#!/usr/bin/env ruby
Dir.glob(File.join(__dir__, 'lib', '*.rb')).each do |file|
  require_relative file
end


class Main
  def initialize
    args = ARGV.clone
    Signal.trap("SIGPIPE") do
      Lock.unlock(args)
      exit
    end

    begin

      path, args = Helper.find_change_directory_arg(args)
      lock_args = args.clone
      Helper.validate_path(path)
      DirManager.change_directory(path)

      unless args.empty? || (%w[init clone] & args).any?
        unless File.directory? (DirManager.get_framework_path)
          raise Ex::NotBSFDirectoryException
        end
      end

      if args.include?("--enable-debug-info") # WIP
        Flags.instance.set(:debug_info)
      end

      Lock.lock(lock_args)

      opt = OptionParser::OptionParser.new
      option_parser_default_initializer(opt)
      option_parser_conditions_initializer(opt, args)
      Lock.unlock(lock_args)
    rescue Ex::CouldNotGetLockException => e
      puts(e.message)
      exit -1
    rescue Exception => e
      Lock.unlock(lock_args)
      puts(e.message)
      exit -1
    end
  end

  def option_parser_conditions_initializer(opt, args)
    # sources get
    opt.condition_option("sources get",     { name: "shallow", short: "-s", type: :option } )
    opt.condition_option("sources get",     { name: "sources", multiple: true } )
    opt.condition_action("sources get")     { |opts| Source.get_sources(opts[:sources]) }
    # sources delete
    opt.condition_option("sources delete",  { name: "task", mandatory: true } )
    opt.condition_action("sources delete")  { |opts| Source.delete_sources(opts[:task]) }
    # sources list
    opt.condition_action("sources list")    { |opts| Source.list_sources() }
    # sources show
    opt.condition_action("sources show")    { |opts| Source.show_sources() }
    # saveconfig
    opt.condition_option("saveconfig",      { name: "pathtosave", mandatory: true } )
    opt.condition_action("saveconfig")      { |opts| Config.save_config(opts[:pathtosave]) }
    # clone
    opt.condition_help("clone",             "Clone an existing Framework Environment to a directory")
    opt.condition_option("clone",           { name: "gitrepo", mandatory: true } )
    opt.condition_option("clone",           { name: "directory", mandatory: true } )
    opt.condition_action("clone")           { |opts| GitManager.get_clone_framework(opts[:gitrepo], opts[:directory]) }
    # init
    opt.condition_help("init",              "Create a new Framework Environment")
    opt.condition_option("init",            { name: "folderpath", mandatory: true } )
    opt.condition_action("init")            { |opts| Config.init_bsf(opts[:folderpath]) }
    # vars
    opt.condition_action("vars")            { |opts| puts VarManager.instance.var_list() }
    # tasks
    opt.condition_help("tasks",             "Lists all the tasks and its description")
    opt.condition_action("tasks")           { |opts| puts Helper.tasks_list() }
    # set
    opt.condition_option("set",             { name: "option", type: :equal, mandatory: true } )
    opt.condition_action("set")             { |opts| VarManager.instance.set(opts[:option][0], opts[:option][1]); VarManager.instance.save }
    # execute
    opt.condition_option("execute",         { name: "verbose", short: "-v", type: :option } )
    opt.condition_option("execute",         { name: "confirm", short: "-y", type: :option } )
    opt.condition_option("execute",         { name: "parallel", short: "-p", type: :option } )
    opt.condition_option("execute",         { name: "task", mandatory: false, multiple: true } )
    opt.condition_action("execute")         { |opts| Build.build(opts[:task]) }
    # publish
    opt.condition_action("publish")         { |opts| Publish.publish() }
    # diff
    opt.condition_option("diff",            { name: "hash1", mandatory: true })
    opt.condition_option("diff",            { name: "hash2", mandatory: true })
    opt.condition_action("diff")            { |opts| puts Diff.diff(opts[:hash1], opts[:hash2]) }
    # git
    opt.condition_option("git",             { name: "gitcommand", mandatory: true, multiple: true, type: :args} )
    opt.condition_action("git")             { |opts| GitManager.internal_git(opts[:gitcommand]) }
    # search  $<options>
    opt.condition_option("search",          { name: "options", mandatory: true, multiple: true } )
    opt.condition_action("search")          { |opts| puts GitManager.search_log(opts[:options]) }
    # compare
    opt.condition_option("compare",         { name: "task", mandatory: true } )
    opt.condition_option("compare",         { name: "args", mandatory: true, multiple: true, type: :args} )
    opt.condition_action("compare")         { |opts| puts Compare.compare(opts[:task], opts[:args]) }
    # compare all
    opt.condition_option("compareall",      { name: "args", mandatory: true, multiple: true, type: :args} )
    opt.condition_action("compareall")      { |opts| puts Compare.agregator(opts[:args]) }
    # report
    opt.condition_option("report",          { name: "task", mandatory: true } )
    opt.condition_option("report",          { name: "args", multiple: true, type: :args} )
    opt.condition_action("report")          { |opts| puts Report.report(opts[:task], opts[:args]) }
    # server
    opt.condition_option("server",          { name: "options", multiple: true, type: :args} )
    opt.condition_action("server")          { |opts| WebServer2.execute(opts[:options]) }
    # log
    opt.condition_option("log",             { name: "follow", short: "-f", type: :option })
    opt.condition_option("log",             { name: "task", mandatory: true })
    opt.condition_option("log",             { name: "hash" })
    opt.condition_action("log")             { |opts| puts Log.log(opts[:task], opts[:hash]) }
    # status
    opt.condition_option("status",          { name: "hash" })
    opt.condition_action("status")          { |opts| puts Status.get_task_status(opts[:hash]) }
    #clean
    opt.condition_option("clean",           { name: "confirm", short: "-y", type: :option })
    opt.condition_option("clean",           { name: "task", multiple: true } )
    opt.condition_action("clean")           { |opts| Clean.clean(opts[:task]) }
    # ls
    opt.condition_option("ls",              { name: "task", mandatory: true } )
    opt.condition_option("ls",              { name: "hash" } )
    opt.condition_action("ls")              { |opts| puts Ls.ls(opts[:task], opts[:hash]) }
    # cat
    opt.condition_option("cat",             { name: "task", mandatory: true } )
    opt.condition_option("cat",             { name: "file", mandatory: true } )
    opt.condition_option("cat",             { name: "hash" } )
    opt.condition_action("cat")             { |opts| puts Cat.cat(opts[:task], opts[:hash], opts[:file]) }
    # cp
    opt.condition_option("cp",              { name: "task", mandatory: true } )
    opt.condition_option("cp",              { name: "file", mandatory: true } )
    opt.condition_option("cp",              { name: "path", mandatory: true } )
    opt.condition_option("cp",              { name: "hash" } )
    opt.condition_action("cp")              { |opts| puts opts }

    opt.parse(args)

  end


  def option_parser_default_initializer(opt)

    opt.default do
      puts <<-EOF
usage: bsf [-C <path>] <command>

These are the BSF commands used in various situations:

Start a working Environment
    init <folderpath>                         Create a new Framework Environment.
    clone <gitrepo> <dir>                     Clone an existing Framework Environment to a directory.

Work with task/s
    execute [tasks]                           Execute the tasks' :execution property.
      -p | --parallel                           Execute each task concurrently.
      -y | --confirm                            Confirm to continue.
    log <task>                                Print the log of a task.
      -f | --follow                             Follow the log of a task.
    status                                    Lists the status of all tasks.
    tasks                                     Lists all the tasks and their description.

Work with Input Variables
    set <name>=<value>                        Defines the value to the Input Variable.
    vars                                      Lists all the Input Variables and their value.

Work with the Git Repositories
    sources get [names]                       Clone a new Source to the framework environment.
      -s | --shallow                            Clone the source as shallow. (--depth 1 --single-branch)
    sources delete <name>                     Delete a Source from the framework environment.
    sources list                              List all the Sources in the config file.
    sources show                              Show all cloned the Sources in the framework environment.

Work with Git
    git <gitcommands>                         Execute internal git commands.
    publish                                   Adds and commits with a specific commit message to local git repository.
    search <var>=<value>                      Searchs on git log's commit message.
    diff <hash1> <hash2>                      Find the differences in the commit messages between two commit ids.
    ls <task> [commitid]                      List all files within persistent workspace.
    cat <task> <file> [commitid]              Print a file from a task's persistent workspace.

Work with comparasion
    compare <task> [hash1]:[hash2] [args]     Compares task between different commits. (Uses local if hash not provided)
      --help                                    Print help from compare script.
    compareall [hash1]:[hash2] [args]         Compares all tasks between different commits. (Uses local if hash not provided)

Work with reporting
    report <task> [args]                      Print a report on the given task,
      --help                                    Print help from report script.

Miscellaneous
    saveconfig <pathtosave>                   Saves internal config with dependencies to pathtosave.
    clean [tasks]                             Cleans workspace folder, logs and resets status.
      -y | --confirm                            Confirm to continue.

EOF
    end
  end


end

Main.new
